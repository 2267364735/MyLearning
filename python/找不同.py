"""
题目描述：
给定两个字符串 s 和 t。字符串 t 是通过对字符串 s 的字符进行重新排列，
然后在随机位置额外添加一个字符而形成的。请找出在 t 中添加的那个额外字符。
例如：
若 s = "abcd"，t = "abcde"，则答案是 'e'
若 s = ""，t = "y"，则答案是 'y'
若 s = "a"，t = "aa"，则答案是 'a'
"""
class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        cnt = [0] * 26
        for ch in s:
            cnt[ord(ch) - 97] += 1
        for ch in t:
            idx = ord(ch) - 97
            cnt[idx] -= 1
            if cnt[idx] < 0:
                return ch


"""
解题思路：
核心观察：
t 比 s 恰好多 1 个字符，其余字符（包括出现次数）完全相同。
因此，只需找到 “在 t 中出现次数比 s 多 1 次” 的字符即可。
计数法思路：
可以用一个长度为 26 的数组（对应 26 个小写字母）记录每个字符的出现次数。
先遍历 s，对每个字符的计数 加 1；
再遍历 t，对每个字符的计数 减 1；
当某个字符的计数减到负数时，说明它就是 t 多出来的字符
（因为 s 中该字符的数量不够抵消 t 中的）
"""


#方法二：求和作差
class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        return chr(sum(map(ord, t)) - sum(map(ord, s)))
"""
解题提示（基于 ASCII 码总和的思路）：
1.题目中 t 比 s 恰好只多 1 个字符，其余所有字符（包括出现次数）完全相同。
2.每个字符都有对应的 ASCII 码（比如 'a'=97，'b'=98...），可以被当作数字处理。
3.思考：t 中所有字符的 ASCII 码总和，与 s 中所有字符的 ASCII 码总和，它们的差值会是什么？
4.这个差值其实就是那个 “额外字符” 的 ASCII 码，再把它转成字符就得到答案了。
"""

#方法三：异或运算
def findTheDifference(self, s: str, t: str) -> str:
    x = 0  # 初始化异或结果为0
    for ch in s: x ^= ord(ch)  # 用x异或s中所有字符的ASCII码
    for ch in t: x ^= ord(ch)  # 再用x异或t中所有字符的ASCII码
    return chr(x)  # 把最终的x（额外字符的ASCII码）转成字符
"""
解题提示（基于异或运算的思路）：
1.回忆异或运算（XOR）的核心特性：
·相同数字异或结果为 0（例如 a ^ a = 0）
·0与任何数字异或结果为该数字本身（例如 0 ^ a = a）
·运算顺序不影响结果（交换律、结合律）
2.结合题目特点思考：
·t 比 s 只多 1 个字符，其余所有字符（包括出现次数）完全相同。
·那么，若将 s 和 t 中所有字符的 ASCII 码都进行异或运算，会发生什么？
3.关键逻辑：
·相同的字符会因为 “a ^ a = 0” 相互抵消，
最后剩下的结果，就是那个 “额外字符” 的 ASCII 码。
·用这个结果调用 chr() 函数，就能得到答案。
"""